#!/usr/bin/env python

import urllib2
import json
import sys
import random
import getpass
from concurrent import futures

# TODO find issues not in your repos
# TODO weight based on various things
 # how many comments
 # age
 # ..etc?
# TODO work with private repos, etc.

CONCURRENCY = 15

def usage() :
	print 'usage: githubroulette <username> [n=number of issues to show]'
	sys.exit(1)

def get_open_issues(username, repo) :
	issues_fa = json.load(urllib2.urlopen('https://api.github.com/repos/%s/%s/issues' % (username, repo)))
	return [
	         ('https://github.com/%s/%s/issues/%d' % (username, repo, issue['number']), issue['title'])
	         for issue in issues_fa if issue['state'] == 'open'
	       ]

if __name__ == '__main__' :
	try :
		username = sys.argv[1]
	except IndexError :
		username = getpass.getuser()
	
	try :
		n = int(sys.argv[2])
		if (n < 1) :
			print 'n must be >= 1\n'
			usage()
	except IndexError :
		n = 5
	
	try :
		stream = urllib2.urlopen('https://api.github.com/users/%s/repos' % username)
	except urllib2.HTTPError, e :
		if e.getcode() == 404 :
			print 'github does not know who %s is.\n' % username
			usage()
		else :
			raise

	repos_fa = json.load(stream)
	repos = [r['name'] for r in repos_fa if r['open_issues'] > 0]
	del repos_fa

	fetching_issues = list()

	tp = futures.ThreadPoolExecutor(max_workers=CONCURRENCY)

	for repo in repos :
		fetching_issues.append(tp.submit(get_open_issues, username, repo))

	open_issues = list()

	for fetching_issue in fetching_issues :
		open_issues += fetching_issue.result()
	
	if not open_issues :
		print 'congratulations, you are free of issues. go outside.'
		sys.exit(0)
	
	random.shuffle(open_issues)

	url_max = 0
	for i in range(n) :
		url_max = max(url_max, len(open_issues[i][0]))

	for i in range(n) :
		url, title = open_issues[i]
		print '%s  %s' % (url.ljust(url_max), title)
